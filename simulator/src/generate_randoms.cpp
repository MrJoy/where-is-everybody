///////////////////////////////////////////////////////////////////////////////
// CUDA and CURAND includes.
///////////////////////////////////////////////////////////////////////////////
#include <cuda.h>
#include <curand.h>


///////////////////////////////////////////////////////////////////////////////
// System includes.
///////////////////////////////////////////////////////////////////////////////
#include <cassert>
#include <stdexcept>


///////////////////////////////////////////////////////////////////////////////
// Local includes.
///////////////////////////////////////////////////////////////////////////////
#include "wie/device.h"
#include "wie/random.h"


///////////////////////////////////////////////////////////////////////////////
// Constants.
///////////////////////////////////////////////////////////////////////////////
#define NUM_SAMPLES 64*1048576


///////////////////////////////////////////////////////////////////////////////
// CLI.
///////////////////////////////////////////////////////////////////////////////
int main() //int argc, char **argv
{
  using std::runtime_error;
  using std::string;

  try {
    // TODO: Grab device ID parameter...
    // TODO: Use clock or some such for random seed, unless specified on CLI...
    // TODO: Parameterize NUM_SAMPLES...
    // TODO: Divide the work among available (selected) devices.

    ///////////////////////////////////////////////////////////////////////////
    // Generate random seed.
    ///////////////////////////////////////////////////////////////////////////
    FILE* randomSource = fopen("/dev/random", "rb");
    unsigned long seed;
    int recordsRead = fread(&seed, sizeof(unsigned long), 1, randomSource);
    assert(recordsRead == 1);
    fclose(randomSource);

    ///////////////////////////////////////////////////////////////////////////
    // Instantiate relevant objects / allocate memory in host RAM.
    ///////////////////////////////////////////////////////////////////////////
    WIE::Device* device = new WIE::Device();
    WIE::Random* wrapper = new WIE::Random(*device, seed, NUM_SAMPLES);
    float *samples = new float[NUM_SAMPLES];


    ///////////////////////////////////////////////////////////////////////////
    // Generate random numbers, copy to host, and spit them out.
    ///////////////////////////////////////////////////////////////////////////
    for(int j = 0; j < 32; j++) {
      wrapper->generate();
      wrapper->copyToHost(samples);

      for(int i = 0; i < NUM_SAMPLES; i++) {
        printf("%f\n", samples[i]);
      }
    }

    ///////////////////////////////////////////////////////////////////////////
    // Cleanup
    ///////////////////////////////////////////////////////////////////////////
    delete wrapper;
    delete device;
    delete samples;
  } catch (runtime_error &e) {
    fprintf(stderr, "ERROR: %s\n", e.what());
    exit(1);
  }

  exit(EXIT_SUCCESS);
}
